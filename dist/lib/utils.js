/**
 * @param thing object to transform
 * @param blacklist field names to exclude
 */
export function toPrintableJson(thing = {}, blacklist = ["ns"]) {
    return JSON.stringify(thing, (key, value) => {
        if (blacklist.indexOf(key) > -1) {
            return undefined;
        }
        return value;
    }, 2);
}
/**
 * For printing variable content or types in a human readable form
 *
 * @param any to transform
 * @param quote sign to use for quoting strings
 * @param quoteMode always, never, whitespace
 */
export function toPrintableType(any, quote = "'", quoteMode = "always") {
    if (_.isUndefined(any)) {
        return "<undefined>";
    }
    if (_.isNull(any)) {
        return "<null>";
    }
    if (_.isNaN(any)) {
        return "<NaN>";
    }
    if (!_.isFinite(any) && any === Number.POSITIVE_INFINITY) {
        return "<Infinity>";
    }
    if (!_.isFinite(any) && any === Number.NEGATIVE_INFINITY) {
        return "<-Infinity>";
    }
    if (_.isArray(any) && any.length === 0) {
        return "[]";
    }
    if (_.isArray(any) && any.length > 0) {
        return `[${any.map(v => toPrintableType(v))}]`;
    }
    if (_.isObject(any) && _.isEmpty(any)) {
        if (!("name" in any))
            return "{}";
        return `{${any.name}}`;
    }
    if (_.isObject(any) && !_.isEmpty(any)) {
        if (!("name" in any))
            return "{Object}";
        return `{${any.name}}`;
    }
    if (_.isString(any)) {
        switch (quoteMode) {
            case "always":
                return `${quote}${any}${quote}`;
            case "whitespace":
                if (any.match("\\s")) {
                    return `${quote}${any}${quote}`;
                }
                break;
            case "never":
            default:
                break;
        }
        return `${any}`;
    }
    const str = _.toString(any);
    return str;
}
export function random(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
}
export function capatalize(string) {
    return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
}
/**
 * @returns {string} found rank or undefined if nothing was found
 */
export function rankValue(value, ranks, valueMax) {
    const rankCount = ranks.length;
    const step = Math.round(valueMax / rankCount);
    let i = 0;
    for (let currValue = 1; currValue <= valueMax; currValue += step) {
        if (value >= currValue && value < (currValue + step) || i === rankCount - 1) {
            return ranks[i];
        }
        i++;
    }
    return undefined;
}
export function asLabel(string, width = 0) {
    const spacer = (width > 0) ? " ".repeat(width - string.length) : "";
    return `${capatalize(string)}:${spacer}`;
}
export function asArray(any) {
    return _.isArray(any) ? any : [any];
}
/**
 * Given percentage(s) in decimal format (i.e 1 => 100%)
 */
export function asPercent(numbers, decimals = 1, usePadding = true) {
    const isArray = Array.isArray(numbers);
    let nums;
    if (!isArray) {
        nums = [numbers];
    }
    else {
        nums = numbers;
    }
    let percents = nums
        .map(n => isNaN(n) ? 0 : n)
        .map(n => (n * 100).toFixed(decimals))
        .map(n => n + 'ï¼…'); // this is a special percent sign, so ns.tprintf() or ns.sprintf() will not parse it
    if (usePadding) {
        const max = Math.max(...(percents.map(n => n.length)));
        percents = percents.map(n => n.padStart(max, ' '));
    }
    return isArray ? percents : percents[0];
}
const units = ['', 'k', 'm', 'b', 't', 'q', 'Q', 's', 'S'];
/**
 * todo there is: ns.nFormat() *cough*
 *
 * Given big numbers convert to readable, defaults to 2 decimals
 * Fx 1.400.000 => 1.40m
 * If given array converts according to biggest number in array
 * Fx [10.000, 1.000.000] => [0.01m, 1.00m]
 * Handles up to Septillion (10^24)
 */
export function asFormat(numbers, decimals = 2, usePadding = true) {
    const isArray = Array.isArray(numbers);
    let nums;
    if (!isArray) {
        nums = [numbers];
    }
    else {
        nums = numbers;
    }
    let biggest = Math.max(...(nums.map(Math.abs)));
    let unit = 0;
    for (; biggest >= 1000; unit++, biggest /= 1000)
        ;
    const div = Math.pow(10, Math.min(unit, units.length - 1) * 3);
    let formatted = nums.map(n => (n / div).toFixed(decimals) + units[unit]);
    if (usePadding) {
        const longest = Math.max(...(formatted.map(n => n.length)));
        formatted = formatted.map(n => n.padStart(longest, ' '));
    }
    return isArray ? formatted : formatted[0];
}
/**
 *
 * @param {string|number} format e.g. 1k 10m 100b
 * @returns {number}
 */
export function fromFormat(format) {
    if (typeof format === "number") {
        return format;
    }
    const unit = format.slice(-1);
    const unitIdx = units.indexOf(unit);
    const valueString = format.slice(0, -1);
    let multi = 1;
    if (unitIdx !== -1) {
        multi = Math.pow(100, unitIdx + 1);
    }
    const num = Number(valueString);
    if (typeof num !== "number" || Number.isNaN(num)) {
        return 0;
    }
    return num * multi;
}
const unitsGB = ['GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
export function asFormatGB(number, decimals = 2) {
    let unit = "GB";
    for (let i = unitsGB.length; i > 0; i--) {
        if (number >= Math.pow(1024, i)) {
            unit = unitsGB[i];
            number = number / Math.pow(1024, i);
            break;
        }
    }
    return number.toFixed(decimals) + unit;
}
/**
 * @param text e.g. 1PB, 4096TB
 * @returns amount of GB or NaN when text can not be parsed
 */
export function fromFormatGB(text) {
    if (typeof text !== "string" || text === "") {
        return NaN;
    }
    let pow = 1;
    let gigabyte = 0;
    for (let i = 0; i < unitsGB.length; i++) {
        const unit = unitsGB[i].toLowerCase();
        const value = text.toLowerCase();
        if (value.indexOf(unit) !== -1) {
            gigabyte = Number(value.replace(unit, ""));
            pow = i;
            break;
        }
    }
    if (typeof gigabyte !== "number") {
        return NaN;
    }
    return gigabyte * Math.pow(1024, pow);
}
export function median(numbers) {
    const sorted = numbers.slice().sort((a, b) => a - b);
    const middle = Math.floor(sorted.length / 2);
    if (sorted.length % 2 === 0) {
        return (sorted[middle - 1] + sorted[middle]) / 2;
    }
    return sorted[middle];
}
/**
 *
 * @param format e.g. "Server {0} is {1}"
 * @param args e.g. "n00dles", "hacked"
 * @returns e.g. "Server n00dles is hacked"
 */
export function format(format, ...args) {
    for (const k in args) {
        format = format.replace("{" + k + "}", args[k]);
    }
    return format;
}
/**
 * Buffers a certain amount of numbers
 * Can do various calculations with buffered nummers
 */
export class NumberStack {
    numbers;
    maxSize;
    constructor(numbers = [], maxSize = 0) {
        this.numbers = numbers;
        this.maxSize = maxSize;
    }
    push(number) {
        if (this.numbers.length >= this.maxSize) {
            this.numbers.shift();
        }
        this.numbers.push(number);
    }
    pop() {
        return this.numbers.pop();
    }
    avg(numbers = []) {
        numbers = numbers || this.numbers;
        if (numbers.length == 0) {
            return 0;
        }
        let sum = 0;
        for (const num of numbers) {
            sum += num;
        }
        return sum / numbers.length;
    }
    diff() {
        return this.last() - this.first();
    }
    increments() {
        return this.numbers.map((currVal, index) => {
            const prevVal = this.numbers[index - 1];
            return currVal - prevVal;
        }).filter(Boolean);
    }
    avgIncrement() {
        return this.avg(this.increments());
    }
    first() {
        return this.numbers[0];
    }
    last() {
        return this.numbers[this.numbers.length - 1];
    }
    get length() {
        return this.numbers.length;
    }
    isFull() {
        return this.numbers.length === this.maxSize;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiaHR0cDovL2xvY2FsaG9zdDo4MDAwL3NvdXJjZXMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxRQUFrQixFQUFFLEVBQUUsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQ3ZFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7UUFDM0MsSUFBSSxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sU0FBUyxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxHQUFhLEVBQUUsS0FBSyxHQUFHLEdBQUcsRUFBRSxTQUFTLEdBQUcsUUFBUTtJQUM1RSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDcEIsT0FBTyxhQUFhLENBQUM7S0FDeEI7SUFFRCxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDZixPQUFPLFFBQVEsQ0FBQztLQUNuQjtJQUVELElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNkLE9BQU8sT0FBTyxDQUFDO0tBQ2xCO0lBRUQsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxLQUFLLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtRQUN0RCxPQUFPLFlBQVksQ0FBQztLQUN2QjtJQUVELElBQUksQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsS0FBSyxNQUFNLENB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