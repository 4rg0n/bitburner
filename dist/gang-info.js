import { Flags } from "lib/Flags";
import { toPrintableJson } from "lib/utils";
import { Chabo } from "/gang/Chabo";
import { Equipment } from "/gang/Equipment";
import { canRunGang } from '/lib/ns0';
import { Task } from '/gang/Task';
/**
 * For showing various gang information
 */
export async function main(ns) {
    canRunGang(ns);
    const flags = new Flags(ns, [
        ["...", [], `Name(s) of gang member(s) to show info with via --chabo`],
        ["task", ["all"], `Show tasks information: ${Object.values(Task.Categories).join(", ")}`],
        ["equip", ["all"], `Show equipment information: ${ns.gang.getEquipmentNames().join(", ")}`],
        ["chabo", false, `Show chabos information: ${ns.gang.getMemberNames().join(", ")}`],
        ["gang", false, "Show gang information"],
        ["help", false, "For showing various gang information"]
    ]);
    const args = flags.args();
    const chaboNames = args._;
    const taskTypes = args["task"];
    const showChabo = args["chabo"];
    const equipNames = args["equip"];
    const showGang = args["gang"];
    if (flags.isPresent("task")) {
        if (taskTypes.length > 0 && taskTypes[0] !== "all") {
            for (const type of taskTypes) {
                const tasks = Task.get(ns, type);
                tasks.forEach(task => ns.tprintf(`• ${task.name}:\n${toPrintableJson(task.stats)}`));
                ns.tprintf(`Found ${tasks.length} task(s) of type ${type}`);
            }
        }
        else {
            const tasks = Task.get(ns);
            tasks.forEach(task => ns.tprintf(`${toPrintableJson(task.stats)}`));
            ns.tprintf(`Found(${tasks.length} task(s)`);
        }
        return;
    }
    if (showChabo) {
        if (chaboNames.length > 0 && chaboNames[0] !== "") {
            Chabo.get(ns).filter(c => {
                const matched = chaboNames.filter(name => c.name.toLowerCase().indexOf(name.toLowerCase()) !== -1);
                return matched.length > 0;
            }).forEach(chabo => {
                printChabo(ns, chabo);
            });
        }
        else {
            Chabo.get(ns).forEach(chabo => {
                printChabo(ns, chabo);
            });
        }
        return;
    }
    if (showGang) {
        ns.tprintf(`${toPrintableJson(ns.gang.getGangInformation())}`);
        ns.tprintf(`${toPrintableJson(ns.gang.getOtherGangInformation())}`);
        return;
    }
    if (flags.isPresent("equip")) {
        const equipments = Equipment.get(ns);
        if (equipNames.length > 0 && equipNames[0] !== "all") {
            for (const name of equipNames) {
                const equsByName = equipments.filter(e => e.name === name);
                equsByName.forEach(e => ns.tprintf(`• ${e.name} (${e.type}):\n${toPrintableJson(e.stats)}`));
                ns.tprintf(`Found ${equsByName.length} equipment(s) with ${name} in it`);
            }
        }
        else {
            equipments.forEach(e => ns.tprintf(`${e.name} (${e.type}):\n${toPrintableJson(e.stats)}`));
            ns.tprintf(`Found ${equipments.length} equipment(s) with ${name} in it`);
        }
        return;
    }
}
function printChabo(ns, chabo) {
    ns.tprintf(`${chabo.name}:\n`);
    ns.tprintf(`• info:\n${toPrintableJson(chabo.info)}`);
    ns.tprintf(`• statsRaw:\n${toPrintableJson(chabo.statsRaw)}`);
    ns.tprintf(`• ascResult:\n${toPrintableJson(chabo.getAscResult())}`);
    ns.tprintf(`• statMultiWeights:\n${toPrintableJson(chabo.getMultiWeights())}`);
    ns.tprintf(`• statAscMultiWeights:\n${toPrintableJson(chabo.getAscMultiWeights())}`);
    ns.tprintf(`• suitableEquipment:\n${toPrintableJson(chabo.getSuitableEquipment())}`);
    ns.tprintf(`• combatMultiWeight: ${chabo.combatMultiWeight}`);
    ns.tprintf(`• ombatAscMultiWeight: ${chabo.combatAscMultiWeight}`);
    ns.tprintf(`• combatStatsMulti: ${chabo.combatStatsMulti}`);
    ns.tprintf(`• combatStatsAscMulti: ${chabo.combatStatsAscMulti}`);
    ns.tprintf(`• isNoob: ${chabo.isNoob()}`);
    ns.tprintf(`• isBlank: ${chabo.isBlank()}`);
    ns.tprintf(`• isWorking: ${chabo.isWorking()}`);
    ns.tprintf(`• canAscend: ${chabo.canAscend()}`);
    ns.tprintf(`• shouldAscend: ${chabo.shouldAscend()}`);
    ns.tprintf(`• needsTraining: ${chabo.needsTraining()}`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FuZy1pbmZvLmpzIiwic291cmNlUm9vdCI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODAwMC9zb3VyY2VzLyIsInNvdXJjZXMiOlsiZ2FuZy1pbmZvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUU1QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFbEM7O0dBRUc7QUFDRixNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFPO0lBQy9CLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNmLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUN4QixDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUseURBQXlELENBQUM7UUFDdEUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSwyQkFBMkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDekYsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRSwrQkFBK0IsRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQzNGLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSw0QkFBNEIsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNuRixDQUFD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