import { Cracker } from "dist/Cracker";
import { Deployer } from "dist/Deployer";
import { Flags } from "lib/Flags";
import { Scheduler } from "dist/Scheduler";
import { Zerver } from "server/Zerver";
export async function main(ns) {
    const flags = new Flags(ns, [
        ["_", "", "Name of server(s) to run threads against"],
        ["hack", 0, "Number of hack threads"],
        ["grow", 0, "Number of grow threads"],
        ["weaken", 0, "Number of weaken threads"],
        ["host", Scheduler.WorkerType.All, `Category of hosts to deploy: ${Object.values(Scheduler.WorkerType).join(", ")}`],
        ["help", false, "For executing a single run against a server. For testing purposes."]
    ]);
    const args = flags.args();
    const targetNames = args._;
    const workerType = args["host"];
    const servers = Zerver.get(ns);
    const targets = servers.filter(s => {
        const matches = targetNames.filter(name => s.name.toLowerCase().indexOf(name.toLowerCase()) >= 0);
        return matches.length > 0;
    });
    ns.tprintf(`Found ${targets.length} matching target(s)`);
    const threads = {
        hack: args["hack"],
        grow: args["grow"],
        weaken: args["weaken"]
    };
    if (targets.length === 0) {
        return;
    }
    ns.tprintf(`\n${targets.map(s => s.name).join(", ")}`);
    const cracker = new Cracker(ns);
    const deployer = new Deployer(ns, cracker);
    const scheduler = new Scheduler(ns, targets, deployer, workerType);
    for (const workQueue of scheduler.scheduledQueue) {
        workQueue.queueWork(threads);
    }
    await scheduler.run();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhlYy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImV4ZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHdkMsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTztJQUNqQyxNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUU7UUFDM0IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLDBDQUEwQyxDQUFDO1FBQ3JELENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSx3QkFBd0IsQ0FBQztRQUNyQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsd0JBQXdCLENBQUM7UUFDckMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLDBCQUEwQixDQUFDO1FBQ3pDLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLGdDQUFnQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNwSCxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsb0VBQW9FLENBQUM7S0FDckYsQ0FBQyxDQUFDO0lBRUgsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLE1BQU0sV0FBVyxHQUFjLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDekMsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRWhDLE1BQU0sT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUIsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNyQyxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDbEcsT0FBTyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMzQixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxPQUFPLENBQUMsTUFBTSxxQkFBcUIsQ0FBQyxDQUFDO0lBRXpELE1BQU0sT0FBTyxHQUFHO1FBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDbEIsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDbEIsTUFBTSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7S0FDdEIsQ0FBQTtJQUVELElBQUksT0FBTyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDekIsT0FBTztLQUNQO0lBRUQsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUV2RCxNQUFNLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixNQUFNLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0MsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFFckUsS0FBSyxNQUFNLFNBQVMsSUFBSSxTQUFTLENBQUMsY0FBYyxFQUFFO1FBQ2pELFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDN0I7SUFFRCxNQUFNLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUN2QixDQUFDIn0=