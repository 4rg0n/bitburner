import { Chabo } from '/gang/Chabo';
import { NameGenerator } from '/lib/NameGenerator';
import { toPrintableJson } from '/lib/utils';
import { Task } from '/gang/Task';
export class GangConfig {
    config;
    constructor(config = []) {
        this.config = config;
    }
    get length() {
        return this.config.length;
    }
    static fromObjectArray(config = []) {
        return new GangConfig(config);
    }
    static fromFile(ns, path) {
        const config = GangConfigGenerator.read(ns, path);
        return new GangConfig(config);
    }
    static fromStringArray(ns, config) {
        const configObjects = config.map((value, i, entry) => {
            const chaboNames = entry[0];
            const taskNames = entry[1];
            if (!Array.isArray(chaboNames) || !Array.isArray(chaboNames)) {
                console.warn("Illegal chabo config", chaboNames, taskNames);
                throw new Error(`Illegal chabo config`);
            }
            const chabos = chaboNames.map(name => new Chabo(ns, name));
            const tasks = taskNames.map(name => new Task(ns, name));
            return { chabos: chabos, tasks: tasks };
        });
        if (typeof configObjects === "undefined") {
            return new GangConfig();
        }
        return GangConfig.fromObjectArray(configObjects);
    }
    static fromGenerator(ns, hack = 0, combat = 0) {
        const config = GangConfigGenerator.generateGangConfig(ns, hack, combat);
        return GangConfig.fromObjectArray(config);
    }
    getAllChabos() {
        const chabos = this.config.flatMap(c => c.chabos);
        return _.uniqBy(chabos, c => c.name);
    }
}
export class GangConfigGenerator {
    static BasePath = "/gang/config/";
    static ConfigPrefix = "gang.";
    static MaximumGangMembers = 12;
    static DefaultConfigPath = GangConfigGenerator.BasePath + GangConfigGenerator.ConfigPrefix + "default";
    static CurrentConfigPath = GangConfigGenerator.BasePath + GangConfigGenerator.ConfigPrefix + "current";
    static generateGangConfig(ns, hack = 0, combat = 0) {
        const total = hack + combat;
        if (total > GangConfigGenerator.MaximumGangMembers) {
            throw new Error(`Only ${GangConfigGenerator.MaximumGangMembers} members total are allowed got ${total}`);
        }
        let names = NameGenerator.generateMultiple(total, []);
        const config = [];
        for (let i = 0; i <= hack; i++) {
            config.push({
                chabos: [new Chabo(ns, names[i])],
                tasks: [new Task(ns, Task.Names.Ransomware)]
            });
        }
        names = names.slice(hack - 1);
        for (let i = 0; i <= combat; i++) {
            config.push({
                chabos: [new Chabo(ns, names[i])],
                tasks: [new Task(ns, Task.Names.Mug)]
            });
        }
        return config;
    }
    static generateDefault(ns) {
        return this.generateGangConfig(ns, 12, 0);
    }
    static async writeDefault(ns) {
        const config = GangConfigGenerator.generateDefault(ns);
        return await GangConfigGenerator.write(ns, config, GangConfigGenerator.DefaultConfigPath);
    }
    static async writeCurrent(ns) {
        const config = GangConfigGenerator.fromCurrent(ns);
        return await GangConfigGenerator.write(ns, config, GangConfigGenerator.CurrentConfigPath);
    }
    static async writeAlias(ns, config, alias) {
        return await GangConfigGenerator.write(ns, config, GangConfigGenerator.pathForAlias(alias));
    }
    static async write(ns, config, path) {
        const simpleData = GangConfigGenerator.toSimple(config);
        const data = toPrintableJson(simpleData);
        await ns.write(path, data, "w");
        return path;
    }
    static readAlias(ns, alias) {
        return GangConfigGenerator.read(ns, GangConfigGenerator.pathForAlias(alias));
    }
    static read(ns, path) {
        const simpleData = ns.read(path);
        const simpleParsed = JSON.parse(simpleData);
        const data = GangConfigGenerator.fromSimple(ns, simpleParsed);
        if (!_.isArray(data))
            return [];
        return data;
    }
    static toSimple(configs) {
        const configSimple = [];
        for (const config of configs) {
            configSimple.push({
                chabos: config.chabos.map(c => c.name),
                tasks: config.tasks.map(t => t.name)
            });
        }
        return configSimple;
    }
    static fromSimple(ns, configSimple) {
        const configs = [];
        for (const config of configSimple) {
            configs.push({
                chabos: config.chabos.map(name => new Chabo(ns, name)),
                tasks: config.tasks.map(name => new Task(ns, name))
            });
        }
        return configs;
    }
    static fromCurrent(ns) {
        return Chabo.get(ns).map(c => {
            return {
                chabos: [c],
                tasks: [new Task(ns, c.getTaskName())]
            };
        });
    }
    static pathForAlias(alias) {
        return GangConfigGenerator.BasePath + GangConfigGenerator.ConfigPrefix + alias;
    }
    static ls(ns) {
        return ns.ls(ns.getHostname(), `${GangConfigGenerator.BasePath + GangConfigGenerator.ConfigPrefix}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FuZ0NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdhbmcvR2FuZ0NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFZbEMsTUFBTSxPQUFPLFVBQVU7SUFDbkIsTUFBTSxDQUFlO0lBRXJCLFlBQVksU0FBeUIsRUFBRTtRQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUN6QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM5QixDQUFDO0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUF5QixFQUFFO1FBQzlDLE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBTyxFQUFFLElBQWE7UUFDbEMsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNsRCxPQUFPLElBQUksVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLEVBQU8sRUFBRSxNQUE2QjtRQUN6RCxNQUFNLGFBQWEsR0FBbUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDakUsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUzQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQzFELE9BQU8sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUM1RCxNQUFNLElBQUksS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7YUFDM0M7WUFFRCxNQUFNLE1BQU0sR0FBRyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDM0QsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRXhELE9BQU8sRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksT0FBTyxhQUFhLEtBQUssV0FBVyxFQUFFO1lBQ3RDLE9BQU8sSUFBSSxVQUFVLEVBQUUsQ0FBQztTQUMzQjtRQUVELE9BQU8sVUFBVSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFPLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQztRQUM5QyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3hFLE9BQU8sVUFBVSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsWUFBWTtRQUNSLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xELE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLG1CQUFtQjtJQUU1QixNQUFNLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQztJQUNsQyxNQUFNLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztJQUM5QixNQUFNLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO0lBQy9CLE1BQU0sQ0FBQyxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUMsWUFBWSxHQUFHLFNBQVMsQ0FBQztJQUN2RyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsbUJBQW1CLENBQUMsUUFBUSxHQUFHLG1CQUFtQixDQUFDLFlBQVksR0FBRyxTQUFTLENBQUM7SUFFdkcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEVBQU8sRUFBRSxJQUFJLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDO1FBQ25ELE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxNQUFNLENBQUM7UUFFNUIsSUFBSSxLQUFLLEdBQUcsbUJBQW1CLENBQUMsa0JBQWtCLEVBQUU7WUFDaEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLG1CQUFtQixDQUFDLGtCQUFrQixrQ0FBa0MsS0FBSyxFQUFFLENBQUMsQ0FBQztTQUM1RztRQUVELElBQUksS0FBSyxHQUFHLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDdEQsTUFBTSxNQUFNLEdBQW1CLEVBQUUsQ0FBQztRQUVsQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzVCLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ1IsTUFBTSxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQzthQUMvQyxDQUFDLENBQUM7U0FDTjtRQUVELEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUU5QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlCLE1BQU0sQ0FBQyxJQUFJLENBQUM7Z0JBQ1IsTUFBTSxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN4QyxDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLEVBQU87UUFDMUIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBTztRQUM3QixNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdkQsT0FBTyxNQUFNLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxFQUFFLEVBQUUsTUFBTSxFQUFFLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQU87UUFDN0IsTUFBTSxNQUFNLEdBQUcsbUJBQW1CLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ25ELE9BQVEsTUFBTSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9GLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFPLEVBQUUsTUFBc0IsRUFBRSxLQUFjO1FBQ25FLE9BQU8sTUFBTSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBTyxFQUFFLE1BQXNCLEVBQUUsSUFBYTtRQUM3RCxNQUFNLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDeEQsTUFBTSxJQUFJLEdBQUcsZUFBZSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpDLE1BQU0sRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRWhDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQU8sRUFBRSxLQUFjO1FBQ3BDLE9BQU8sbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFPLEVBQUUsSUFBYTtRQUM5QixNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsTUFBTSxJQUFJLEdBQUcsbUJBQW1CLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUVoQyxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUF1QjtRQUNuQyxNQUFNLFlBQVksR0FBeUIsRUFBRSxDQUFDO1FBRTlDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzFCLFlBQVksQ0FBQyxJQUFJLENBQUM7Z0JBQ2QsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztnQkFDdEMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUN2QyxDQUFDLENBQUM7U0FDTjtRQUVELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQU8sRUFBRSxZQUFrQztRQUN6RCxNQUFNLE9BQU8sR0FBbUIsRUFBRSxDQUFDO1FBRW5DLEtBQUssTUFBTSxNQUFNLElBQUksWUFBWSxFQUFFO1lBQy9CLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ1QsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUN0RCxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDdEQsQ0FBQyxDQUFDO1NBQ047UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFPO1FBQ3RCLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDekIsT0FBTztnQkFDSCxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsS0FBSyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO2FBQ3pDLENBQUE7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQWM7UUFDOUIsT0FBTyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUNuRixDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFPO1FBQ2IsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUNSLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFDaEIsR0FBRyxtQkFBbUIsQ0FBQyxRQUFRLEdBQUcsbUJBQW1CLENBQUMsWUFBWSxFQUFFLENBQ3ZFLENBQUM7SUFDTixDQUFDIn0=