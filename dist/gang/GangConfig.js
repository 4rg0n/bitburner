import { Chabo, Task } from '/gang/Chabo';
import { NameGenerator } from '/lib/NameGenerator';
import { toPrintableJson } from '/lib/utils';
export class GangConfig {
    config;
    constructor(config = []) {
        this.config = config;
    }
    get length() {
        return this.config.length;
    }
    static fromObjectArray(config = []) {
        return new GangConfig(config);
    }
    static fromFile(ns, path) {
        const config = GangConfigGenerator.read(ns, path);
        return new GangConfig(config);
    }
    static fromStringArray(ns, config) {
        const configObjects = config.map((value, i, entry) => {
            const chaboNames = entry[0];
            const taskNames = entry[1];
            if (!Array.isArray(chaboNames) || !Array.isArray(chaboNames)) {
                console.warn("Illegal chabo config", chaboNames, taskNames);
                throw new Error(`Illegal chabo config`);
            }
            const chabos = chaboNames.map(name => new Chabo(ns, name));
            const tasks = taskNames.map(name => new Task(ns, name));
            return { chabos: chabos, tasks: tasks };
        });
        if (typeof configObjects === "undefined") {
            return new GangConfig();
        }
        return GangConfig.fromObjectArray(configObjects);
    }
    static fromGenerator(ns, hack = 0, combat = 0) {
        const config = GangConfigGenerator.generateGangConfig(ns, hack, combat);
        return GangConfig.fromObjectArray(config);
    }
    getAllChabos() {
        const chabos = this.config.flatMap(c => c.chabos);
        return _.uniqBy(chabos, c => c.name);
    }
}
export class GangConfigGenerator {
    static BasePath = "/gang/config/";
    static ConfigPrefix = "gang.";
    static MaximumGangMembers = 12;
    static DefaultConfigPath = GangConfigGenerator.BasePath + GangConfigGenerator.ConfigPrefix + "default";
    static CurrentConfigPath = GangConfigGenerator.BasePath + GangConfigGenerator.ConfigPrefix + "current";
    static generateGangConfig(ns, hack = 0, combat = 0) {
        const total = hack + combat;
        if (total > GangConfigGenerator.MaximumGangMembers) {
            throw new Error(`Only ${GangConfigGenerator.MaximumGangMembers} members total are allowed got ${total}`);
        }
        let names = NameGenerator.generateMultiple(total, []);
        const config = [];
        for (let i = 0; i <= hack; i++) {
            config.push({
                chabos: [new Chabo(ns, names[i])],
                tasks: [new Task(ns, Task.Names.Ransomware)]
            });
        }
        names = names.slice(hack - 1);
        for (let i = 0; i <= combat; i++) {
            config.push({
                chabos: [new Chabo(ns, names[i])],
                tasks: [new Task(ns, Task.Names.Mug)]
            });
        }
        return config;
    }
    static generateDefault(ns) {
        return this.generateGangConfig(ns, 12, 0);
    }
    static async writeDefault(ns) {
        const config = GangConfigGenerator.generateDefault(ns);
        return await GangConfigGenerator.write(ns, config, GangConfigGenerator.DefaultConfigPath);
    }
    static async writeCurrent(ns) {
        const config = GangConfigGenerator.fromCurrent(ns);
        return await GangConfigGenerator.write(ns, config, GangConfigGenerator.CurrentConfigPath);
    }
    static async writeAlias(ns, config, alias) {
        return await GangConfigGenerator.write(ns, config, GangConfigGenerator.pathForAlias(alias));
    }
    static async write(ns, config, path) {
        const simpleData = GangConfigGenerator.toSimple(config);
        const data = toPrintableJson(simpleData);
        await ns.write(path, data, "w");
        return path;
    }
    static readAlias(ns, alias) {
        return GangConfigGenerator.read(ns, GangConfigGenerator.pathForAlias(alias));
    }
    static read(ns, path) {
        const simpleData = ns.read(path);
        const simpleParsed = JSON.parse(simpleData);
        const data = GangConfigGenerator.fromSimple(ns, simpleParsed);
        if (!_.isArray(data))
            return [];
        return data;
    }
    static toSimple(configs) {
        const configSimple = [];
        for (const config of configs) {
            configSimple.push({
                chabos: config.chabos.map(c => c.name),
                tasks: config.tasks.map(t => t.name)
            });
        }
        return configSimple;
    }
    static fromSimple(ns, configSimple) {
        const configs = [];
        for (const config of configSimple) {
            configs.push({
                chabos: config.chabos.map(name => new Chabo(ns, name)),
                tasks: config.tasks.map(name => new Task(ns, name))
            });
        }
        return configs;
    }
    static fromCurrent(ns) {
        return Chabo.get(ns).map(c => {
            return {
                chabos: [c],
                tasks: [new Task(ns, c.getTaskName())]
            };
        });
    }
    static pathForAlias(alias) {
        return GangConfigGenerator.BasePath + GangConfigGenerator.ConfigPrefix + alias;
    }
    static ls(ns) {
        return ns.ls(ns.getHostname(), `${GangConfigGenerator.BasePath + GangConfigGenerator.ConfigPrefix}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FuZ0NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJodHRwOi8vbG9jYWxob3N0OjgwMDAvc291cmNlcy8iLCJzb3VyY2VzIjpbImdhbmcvR2FuZ0NvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFlBQVksQ0FBQztBQVk3QyxNQUFNLE9BQU8sVUFBVTtJQUNuQixNQUFNLENBQWU7SUFFckIsWUFBWSxTQUF5QixFQUFFO1FBQ25DLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMsZUFBZSxDQUFDLFNBQXlCLEVBQUU7UUFDOUMsT0FBTyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFPLEVBQUUsSUFBYTtRQUNsQyxNQUFNLE1BQU0sR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xELE9BQU8sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxlQUFlLENBQUMsRUFBTyxFQUFFLE1BQTZCO1FBQ3pELE1BQU0sYUFBYSxHQUFtQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNqRSxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FB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